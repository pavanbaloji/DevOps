// (c) Copyright 2007-10 Thomas F. Abraham.
// This source is subject to the Microsoft Public License (Ms-PL).
// See http://www.opensource.org/licenses/ms-pl.html
// All other rights reserved.

using System;
using System.Data;
using System.IO;
using System.Xml;

namespace EnvironmentSettingsExporter
{
    /// <summary>
    /// Export the settings contained in a DataTable to multiple XML files, one per declared environment.
    /// </summary>
    internal abstract class DataTableToXmlExporter
    {
        private const int SettingNameColumnIndex = 0;
        private const int DefaultValueColumnIndex = 1;

        private const int EnvironmentNameRowIndex = 1;
        private const int GenerateFileRowIndex = 2;
        private const int FilenameRowIndex = 3;
        private const int FirstValueRowIndex = 6;

        protected virtual void WriteHeader(XmlWriter xmlw, string environmentName)
        {
        }

        protected abstract void WriteValue(
            XmlWriter xmlw, string settingName, string settingValue, string environmentName, bool valueContainsReservedXmlCharacter);

        protected virtual void WriteFooter(XmlWriter xmlw, string environmentName)
        {
        }

        /// <summary>
        /// Export the settings contained in a DataTable to multiple XML files, one per declared environment.
        /// </summary>
        /// <param name="settingsTable">DataTable containing settings values</param>
        /// <param name="outputPath">Output folder path</param>
        /// <param name="inputFilename">Name of original input file</param>
        internal void ExportSettings(DataTable settingsTable, string outputPath, string inputFilename, bool useSingleOutputFile, string singleOutputFileName)
        {
            XmlWriterSettings xmls = new XmlWriterSettings();
            xmls.CloseOutput = true;
            xmls.Indent = true;
            xmls.OmitXmlDeclaration = false;

            XmlWriter xmlw = null;

            try
            {
                if (useSingleOutputFile)
                {
                    string outputFile = Path.Combine(outputPath, singleOutputFileName);
                    xmlw = XmlWriter.Create(outputFile, xmls);

                    Console.WriteLine("Exporting to " + singleOutputFileName + "...");

                    WriteHeaderComment(inputFilename, xmlw);
                    WriteHeader(xmlw, null);
                }

                // Start with the first column past default values
                for (int columnIndex = DefaultValueColumnIndex + 1;
                     columnIndex < settingsTable.Columns.Count && !settingsTable.Rows[FilenameRowIndex].IsNull(columnIndex);
                     columnIndex++)
                {
                    bool generateFile = ParseGenerateFileValue((string)settingsTable.Rows[GenerateFileRowIndex][columnIndex]);
                    string environmentName = (string)settingsTable.Rows[EnvironmentNameRowIndex][columnIndex];

                    // Skip this column if the user chose not to generate a file for it.
                    if (!generateFile)
                    {
                        Console.WriteLine("Skipping environment " + environmentName + " (disabled).");
                        continue;
                    }

                    if (useSingleOutputFile)
                    {
                        WriteSettings(settingsTable, columnIndex, xmlw, environmentName);
                    }
                    else
                    {
                        string outputFileName = (string)settingsTable.Rows[FilenameRowIndex][columnIndex];
                        string outputFile = Path.Combine(outputPath, outputFileName);

                        Console.WriteLine("Exporting to " + outputFileName + "...");

                        using (xmlw = XmlWriter.Create(outputFile, xmls))
                        {
                            WriteHeaderComment(inputFilename, xmlw);

                            WriteHeader(xmlw, environmentName);

                            WriteSettings(settingsTable, columnIndex, xmlw, environmentName);

                            WriteFooter(xmlw, environmentName);
                        }
                    }

                }

                if (useSingleOutputFile)
                {
                    WriteFooter(xmlw, null);
                }
            }
            finally
            {
                if (xmlw != null)
                {
                    xmlw.Close();
                    xmlw = null;
                }
            }
        }

        private static void WriteHeaderComment(string inputFilename, XmlWriter xmlw)
        {
            xmlw.WriteComment(
                Environment.NewLine +
                "  This file was auto-generated by the Environment Settings Spreadsheet to XML Exporter (http://envsettingsmanager.codeplex.com)."
                + Environment.NewLine
                + Environment.NewLine
                + "  Input File: " + inputFilename
                + Environment.NewLine
                + "  Created: " + DateTime.Now.ToString("M/d/yyyy hh:mm tt")
                + Environment.NewLine);
        }

        private void WriteSettings(DataTable settingsTable, int columnIndex, XmlWriter xmlw, string environmentName)
        {
            xmlw.WriteComment("Environment: " + environmentName);

            // Loop through the rows that contain settings and export each one to the XML file.
            for (int rowIndex = FirstValueRowIndex; rowIndex < settingsTable.Rows.Count; rowIndex++)
            {
                // Determine the setting name, or skip the row if there is no setting name value.
                if (settingsTable.Rows[rowIndex].IsNull(SettingNameColumnIndex))
                {
                    continue;
                }

                string settingName = (string)settingsTable.Rows[rowIndex][SettingNameColumnIndex];
                if (settingName.Trim().Length == 0)
                {
                    continue;
                }

                // Determine the comment value, or skip to the data if there is no comment value.
                if (!settingsTable.Rows[rowIndex].IsNull("Comment"))
                {
                    xmlw.WriteComment(settingsTable.Rows[rowIndex]["Comment"].ToString());
                }

                // Determine the setting value.
                string settingValue = GetSettingValue(settingsTable, rowIndex, columnIndex);

                WriteValue(xmlw, settingName, settingValue, environmentName, HasReservedXmlCharacter(settingValue));
            }
        }

        protected virtual bool HasReservedXmlCharacter(string value)
        {
            return value.Contains("\"") || value.Contains("<") || value.Contains(">") || value.Contains("'") || value.Contains("&");
        }

        /// <summary>
        /// Safely get a value for an environment setting. If no value is specified, try to get the default value. Otherwise, return
        /// an empty string.
        /// </summary>
        /// <param name="settingsTable">DataTable containing the setting values</param>
        /// <param name="rowIndex">Row index of the cell</param>
        /// <param name="columnIndex">Column index of the cell</param>
        /// <returns></returns>
        protected virtual string GetSettingValue(DataTable settingsTable, int rowIndex, int columnIndex)
        {
            string value = GetCellValue(settingsTable, rowIndex, columnIndex);

            if (string.IsNullOrEmpty(value))
            {
                value = GetCellValue(settingsTable, rowIndex, DefaultValueColumnIndex);
            }

            return value;
        }

        protected virtual string GetCellValue(DataTable settingsTable, int rowIndex, int columnIndex)
        {
            if (settingsTable.Rows[rowIndex].IsNull(columnIndex))
            {
                return string.Empty;
            }
            else
            {
                return ((string)settingsTable.Rows[rowIndex][columnIndex]).Trim();
            }
        }

        /// <summary>
        /// Convert the string value of the "Generate File?" setting to a boolean.
        /// </summary>
        /// <param name="value">String value</param>
        /// <returns>Value converted to boolean</returns>
        protected virtual bool ParseGenerateFileValue(string value)
        {
            // No value defaults to true.
            if (string.IsNullOrEmpty(value))
            {
                return true;
            }

            // Either Yes or True (case-insensitive) are accepted as Boolean true
            if (string.Compare("yes", value, StringComparison.InvariantCultureIgnoreCase) == 0
                || string.Compare("true", value, StringComparison.InvariantCultureIgnoreCase) == 0)
            {
                return true;
            }

            return false;
        }
    }
}
